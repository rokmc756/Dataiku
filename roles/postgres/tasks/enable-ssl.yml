#
- name: Create SSL directory
  become_user: postgres
  shell: mkdir -p {{ ssl.ssl_dir }}
  register: create_ssl_dir

#
- name: Generate a CA certificate private key
  become_user: postgres
  shell: openssl genrsa -out {{ ssl.ssl_dir }}/ca.key 4096
  register: gen_ca_cert_priv_key

#
- name: Generate the CA certificate
  become_user: postgres
  shell: |
    openssl req -x509 -new -nodes -sha512 -days 3650 \
    -subj "/C={{ ssl.ssl_country }}/ST={{ ssl.ssl_state }}/L={{ ssl.ssl_location }}/O={{ ssl.ssl_organization }}/OU={{ ssl.ssl_organization_unit }}/CN={{ ssl.ssl_common_name }}/emailAddress={{ ssl.ssl_email }}" \
    -key {{ ssl.ssl_dir }}/ca.key \
    -out {{ ssl.ssl_dir }}/ca.crt
  register: gen_ca_cert

#
- name: Generate a private key
  become_user: postgres
  shell: openssl genrsa -out {{ ssl.ssl_dir }}/server.key 4096
  register: gen_priv_key

#
- name: Generate a certificate signing request (CSR)
  become_user: postgres
  shell: |
    openssl req -sha512 -new \
    -subj "/C={{ ssl.ssl_country }}/ST={{ ssl.ssl_state }}/L={{ ssl.ssl_location }}/O={{ ssl.ssl_organization }}/OU={{ ssl.ssl_organization_unit }}/CN={{ ssl.ssl_common_name }}/emailAddress={{ ssl.ssl_email }}" \
    -key {{ ssl.ssl_dir }}/server.key \
    -out {{ ssl.ssl_dir }}/server.csr
  register: gen_cert_sign_req

#
- name: Copy an x509 v3 extension file
  template: src=v3.ext.j2 dest={{ ssl.ssl_dir }}/v3.ext owner=postgres group=postgres mode=644 force=yes
  register: copy_x509_v3_ext

#
- name: Replace the CRS and CRT file names
  become_user: postgres
  shell: |
    openssl x509 -req -sha512 -days 3650 -extfile {{ ssl.ssl_dir }}/v3.ext \
    -CA {{ ssl.ssl_dir }}/ca.crt -CAkey {{ ssl.ssl_dir }}/ca.key -CAcreateserial \
    -in {{ ssl.ssl_dir }}/server.csr \
    -out {{ ssl.ssl_dir }}/server.crt
  register: replace_csr_crt

#
- name: Change Permission of SSL Key files to login Postgres Database via SSL
  file:
    path: "{{ ssl.ssl_dir }}/{{ item }}"
    state: file
    owner: postgres
    group: postgres
    mode: "0600"
  with_items:
    - "server.key"
    - "server.csr"
    - "server.crt"
    - "ca.key"
    - "ca.crt"
    - "v3.ext"

#
- name: Add ssl configuration file to authenticate SSL User into VMware Postgres Database Server
  become_user: postgres
  lineinfile:
    dest: "{{ pgsql.base_dir }}/data/{{ item.file }}"
    line: "{{ item.line }}"
    state: "{{ item.state }}"
  with_items:
    - { file: "pg_hba.conf",      line: "hostssl  all         all           {{ pgsql_network_range }}         md5",  state: present }
    - { file: "pg_hba.conf",      line: "hostssl  all         all           0.0.0.0/0         md5",                  state: present }
    - { file: "postgresql.conf",  line: "listen_addresses = '*'",                                                    state: present }
    - { file: "postgresql.conf",  line: "port = 5432",                                                               state: present }
    - { file: "postgresql.conf",  line: "ssl = on",                                                                  state: present }
    - { file: "postgresql.conf",  line: "ssl_cert_file = '{{ pgsql.base_dir }}/certs/server.crt'",                   state: present }
    - { file: "postgresql.conf",  line: "ssl_key_file = '{{ pgsql.base_dir }}/certs/server.key'",                    state: present }
  register: ssl_postgres_config

#
- name: Stop Postgres instance manually to apply systemd unit
  become_user: postgres
  shell: /opt/vmware/postgres/{{ pgsql.major_version }}/bin/pg_ctl stop -D {{ pgsql.base_dir }}/data -s -m fast
  register: postgres_instance_stoppped

#
- name: Copy systemd configuration of postgresql into /etc/systemd/system
  template: src=postgresql.systemd.j2 dest=/etc/systemd/system/postgresql.service owner=root group=root mode=644 force=yes
  register: postgresql_systemd_config_copied

#
- name: Reload and start postgresql through systemd
  systemd:
    daemon_reexec: true
    daemon_reload: true
    name: postgresql
    enabled: true
    state: started
  register: postgresql_systemd_restarted
